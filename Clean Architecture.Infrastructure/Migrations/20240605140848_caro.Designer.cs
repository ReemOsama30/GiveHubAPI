// <auto-generated />
using System;
using Clean_Architecture.Infrastructure.DbContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Clean_Architecture.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240605140848_caro")]
    partial class caro
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("charityPulse.core.Models.Admin", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("ApplicationUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.HasKey("id");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("Admins");
                });

            modelBuilder.Entity("charityPulse.core.Models.Advertisment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<byte[]>("AdDesign")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<int?>("CharityId")
                        .HasColumnType("int");

                    b.Property<int?>("CorporateId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Duration")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CharityId");

                    b.HasIndex("CorporateId");

                    b.ToTable("Advertisments");
                });

            modelBuilder.Entity("charityPulse.core.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<int?>("AdminId")
                        .HasColumnType("int");

                    b.Property<int?>("CharityId")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CorporateId")
                        .HasColumnType("int");

                    b.Property<int?>("DonorId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("AdminId");

                    b.HasIndex("CharityId");

                    b.HasIndex("CorporateId");

                    b.HasIndex("DonorId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "73a5c616-6d02-4dca-be1b-95e1c7fad149",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "95173c18-c5dc-414f-9f0e-9f3a84b2e664",
                            Email = "user1@example.com",
                            EmailConfirmed = false,
                            IsDeleted = false,
                            LockoutEnabled = false,
                            PasswordHash = "Doe",
                            PhoneNumber = "+1-555-1234",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5f6217d4-9260-4107-af7e-985b19a50502",
                            TwoFactorEnabled = false,
                            UserName = "user1@example.com"
                        },
                        new
                        {
                            Id = "bf89eba9-b143-43d3-9da3-b5162c1e16dc",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "37638316-36ad-4887-b69e-fa33fe4a6532",
                            Email = "user2@example.com",
                            EmailConfirmed = false,
                            IsDeleted = false,
                            LockoutEnabled = false,
                            PasswordHash = "Doe",
                            PhoneNumber = "+1-555-5678",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "0a2ef224-3e22-493c-a40a-afbbba151b10",
                            TwoFactorEnabled = false,
                            UserName = "user2@example.com"
                        },
                        new
                        {
                            Id = "44d2ae7f-df51-4fa0-87c1-c5a6fede0456",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c0065ab8-5e31-46bc-bc98-4af8fe0c57bb",
                            Email = "user3@example.com",
                            EmailConfirmed = false,
                            IsDeleted = false,
                            LockoutEnabled = false,
                            PasswordHash = "Smith",
                            PhoneNumber = "+1-555-9012",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "462f412a-d174-40e5-a893-139c45bf1301",
                            TwoFactorEnabled = false,
                            UserName = "user3@example.com"
                        },
                        new
                        {
                            Id = "4083cd11-6ad5-4c7d-ad87-8e5c36bc046e",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c2f3b2c3-aadd-40a0-86ae-35b3a7bdb91c",
                            Email = "user4@example.com",
                            EmailConfirmed = false,
                            IsDeleted = false,
                            LockoutEnabled = false,
                            PasswordHash = "Johnson",
                            PhoneNumber = "+1-555-3456",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5bbe9ded-8239-486a-8966-6f7a4deaf29e",
                            TwoFactorEnabled = false,
                            UserName = "user4@example.com"
                        },
                        new
                        {
                            Id = "cb02fe7a-713f-4e42-bf89-186cbeda19ed",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3e9033b6-8533-436a-a183-a5e3ce56e1d0",
                            Email = "user5@example.com",
                            EmailConfirmed = false,
                            IsDeleted = false,
                            LockoutEnabled = false,
                            PasswordHash = "William",
                            PhoneNumber = "+1-555-7890",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "35fb6a19-a198-4814-b74f-aed0c85ee77f",
                            TwoFactorEnabled = false,
                            UserName = "user5@example.com"
                        });
                });

            modelBuilder.Entity("charityPulse.core.Models.Badge", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CharityId")
                        .HasColumnType("int");

                    b.Property<int?>("CorporateId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateRecived")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DonorId")
                        .HasColumnType("int");

                    b.Property<byte[]>("Icon")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CharityId");

                    b.HasIndex("CorporateId");

                    b.HasIndex("DonorId");

                    b.ToTable("Badges");
                });

            modelBuilder.Entity("charityPulse.core.Models.Charity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ApplicationUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<byte[]>("ProfileImg")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("WebsiteUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("charities");
                });

            modelBuilder.Entity("charityPulse.core.Models.Corporate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ApplicationUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CSRProgramDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<byte[]>("ProfileImg")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("WebsiteUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("corporations");
                });

            modelBuilder.Entity("charityPulse.core.Models.Donation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("CharityId")
                        .HasColumnType("int");

                    b.Property<int?>("CorporateId")
                        .HasColumnType("int");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("nvarchar(21)");

                    b.Property<DateTime>("DonationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DonorId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("ProjectId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CharityId");

                    b.HasIndex("CorporateId");

                    b.HasIndex("DonorId");

                    b.HasIndex("ProjectId");

                    b.ToTable("donations");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Donation");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("charityPulse.core.Models.DonationReport", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<string>("Results")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.HasIndex("ProjectId");

                    b.ToTable("donationsReport");
                });

            modelBuilder.Entity("charityPulse.core.Models.Donor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ApplicationUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DateJoined")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("ProfileImg")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("donors");
                });

            modelBuilder.Entity("charityPulse.core.Models.Project", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("AmountRaised")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("CharityId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DonorId")
                        .HasColumnType("int");

                    b.Property<decimal>("FundingGoal")
                        .HasColumnType("decimal(18,2)");

                    b.Property<byte[]>("Img")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("ReportId")
                        .HasColumnType("int");

                    b.Property<int>("State")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CharityId");

                    b.HasIndex("DonorId");

                    b.HasIndex("ReportId");

                    b.ToTable("projects");
                });

            modelBuilder.Entity("charityPulse.core.Models.Review", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CharityId")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DatePosted")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DonorID")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CharityId");

                    b.HasIndex("DonorID");

                    b.ToTable("reviews");
                });

            modelBuilder.Entity("charityPulse.core.Models.InKindDonation", b =>
                {
                    b.HasBaseType("charityPulse.core.Models.Donation");

                    b.Property<string>("ItemDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasDiscriminator().HasValue("InKindDonation");
                });

            modelBuilder.Entity("charityPulse.core.Models.MoneyDonation", b =>
                {
                    b.HasBaseType("charityPulse.core.Models.Donation");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("MoneyDonation");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("charityPulse.core.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("charityPulse.core.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("charityPulse.core.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("charityPulse.core.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("charityPulse.core.Models.Admin", b =>
                {
                    b.HasOne("charityPulse.core.Models.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("charityPulse.core.Models.Advertisment", b =>
                {
                    b.HasOne("charityPulse.core.Models.Charity", "Charity")
                        .WithMany("Advertisments")
                        .HasForeignKey("CharityId");

                    b.HasOne("charityPulse.core.Models.Corporate", "Corporate")
                        .WithMany("Advertisments")
                        .HasForeignKey("CorporateId");

                    b.Navigation("Charity");

                    b.Navigation("Corporate");
                });

            modelBuilder.Entity("charityPulse.core.Models.ApplicationUser", b =>
                {
                    b.HasOne("charityPulse.core.Models.Admin", "Admin")
                        .WithMany()
                        .HasForeignKey("AdminId");

                    b.HasOne("charityPulse.core.Models.Charity", "Charity")
                        .WithMany()
                        .HasForeignKey("CharityId");

                    b.HasOne("charityPulse.core.Models.Corporate", "Corporate")
                        .WithMany()
                        .HasForeignKey("CorporateId");

                    b.HasOne("charityPulse.core.Models.Donor", "Donor")
                        .WithMany()
                        .HasForeignKey("DonorId");

                    b.Navigation("Admin");

                    b.Navigation("Charity");

                    b.Navigation("Corporate");

                    b.Navigation("Donor");
                });

            modelBuilder.Entity("charityPulse.core.Models.Badge", b =>
                {
                    b.HasOne("charityPulse.core.Models.Charity", "Charity")
                        .WithMany("Badges")
                        .HasForeignKey("CharityId");

                    b.HasOne("charityPulse.core.Models.Corporate", "Corporate")
                        .WithMany("Badges")
                        .HasForeignKey("CorporateId");

                    b.HasOne("charityPulse.core.Models.Donor", "Donor")
                        .WithMany("Badges")
                        .HasForeignKey("DonorId");

                    b.Navigation("Charity");

                    b.Navigation("Corporate");

                    b.Navigation("Donor");
                });

            modelBuilder.Entity("charityPulse.core.Models.Charity", b =>
                {
                    b.HasOne("charityPulse.core.Models.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("charityPulse.core.Models.Corporate", b =>
                {
                    b.HasOne("charityPulse.core.Models.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("charityPulse.core.Models.Donation", b =>
                {
                    b.HasOne("charityPulse.core.Models.Charity", null)
                        .WithMany("Donations")
                        .HasForeignKey("CharityId");

                    b.HasOne("charityPulse.core.Models.Corporate", "Corporate")
                        .WithMany("Donations")
                        .HasForeignKey("CorporateId");

                    b.HasOne("charityPulse.core.Models.Donor", "Donor")
                        .WithMany("Donations")
                        .HasForeignKey("DonorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("charityPulse.core.Models.Project", null)
                        .WithMany("Donations")
                        .HasForeignKey("ProjectId");

                    b.Navigation("Corporate");

                    b.Navigation("Donor");
                });

            modelBuilder.Entity("charityPulse.core.Models.DonationReport", b =>
                {
                    b.HasOne("charityPulse.core.Models.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("charityPulse.core.Models.Donor", b =>
                {
                    b.HasOne("charityPulse.core.Models.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("charityPulse.core.Models.Project", b =>
                {
                    b.HasOne("charityPulse.core.Models.Charity", "Charity")
                        .WithMany("Projects")
                        .HasForeignKey("CharityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("charityPulse.core.Models.Donor", null)
                        .WithMany("Projects")
                        .HasForeignKey("DonorId");

                    b.HasOne("charityPulse.core.Models.DonationReport", "Report")
                        .WithMany()
                        .HasForeignKey("ReportId");

                    b.Navigation("Charity");

                    b.Navigation("Report");
                });

            modelBuilder.Entity("charityPulse.core.Models.Review", b =>
                {
                    b.HasOne("charityPulse.core.Models.Charity", "Charity")
                        .WithMany("Reviews")
                        .HasForeignKey("CharityId");

                    b.HasOne("charityPulse.core.Models.Donor", "Donor")
                        .WithMany("Reviews")
                        .HasForeignKey("DonorID");

                    b.Navigation("Charity");

                    b.Navigation("Donor");
                });

            modelBuilder.Entity("charityPulse.core.Models.Charity", b =>
                {
                    b.Navigation("Advertisments");

                    b.Navigation("Badges");

                    b.Navigation("Donations");

                    b.Navigation("Projects");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("charityPulse.core.Models.Corporate", b =>
                {
                    b.Navigation("Advertisments");

                    b.Navigation("Badges");

                    b.Navigation("Donations");
                });

            modelBuilder.Entity("charityPulse.core.Models.Donor", b =>
                {
                    b.Navigation("Badges");

                    b.Navigation("Donations");

                    b.Navigation("Projects");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("charityPulse.core.Models.Project", b =>
                {
                    b.Navigation("Donations");
                });
#pragma warning restore 612, 618
        }
    }
}
